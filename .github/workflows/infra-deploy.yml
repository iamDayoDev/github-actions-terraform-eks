# Workflow name
name: Infra Deploy

on:
  push:
    branches:
      - main
    paths:
      - terraform/**
    
  workflow_dispatch: 

  # Environment variables for the workflow
env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  EKS_CLUSTER: ${{ vars.EKS_CLUSTER }}
  S3_BUCKET: ${{ vars.S3_BUCKET }}

jobs:
  # terraform:
  #   name: Terraform Apply
  #   runs-on: ubuntu-latest

  #    # Run only on push eventss
  #   if: github.event_name == 'push'

  #   defaults:
  #     run:
  #       shell: bash
  #       working-directory: ./terraform

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ env.AWS_REGION }}

  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v2

  #     - name: Terraform Init
  #       run: terraform init -backend-config="bucket=${{ env.S3_BUCKET }}"

  #     - name: Terraform validate
  #       run: terraform validate

  #     - name: Terraform Plan
  #       run: terraform plan -no-color -input=false -out plainfile

  #     - name: Terraform Plan Status
  #       if: steps.plan.outcome == 'failure'
  #       run: exit 1

  #     - name: Terraform Apply
  #       run: terraform apply -auto-approve -input=false -parallelism=1 plainfile

  #     - name: EKS Update Kubeconfig
  #       id: getEksConfig
  #       if: steps.apply.outcome == 'success'
  #       run: |
  #         aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER }} --region ${{ env.AWS_REGION }}

      # - name: Install Ingress Nginx Controller
      #   if: steps.apply.outcome == 'success' && steps.getEksConfig.outcome == 'success'
      #   run: |
      #     kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/aws/deploy.yaml  


  destroy:
    name: "Destroy Infra on AWS"
    runs-on: ubuntu-latest
    # # Only trigger for workflow_dispatch
    # if: github.event_name == 'workflow_dispatch'

    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform init
        id: init
        run: terraform init -backend-config="bucket=$S3_BUCKET"

      - name: Get Kubernetes config
        id: getconfig
        run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER }} --region ${{ env.AWS_REGION }} 

      # - name: Delete Ingress controller
      #   run: kubectl delete -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.12.0-beta.0/deploy/static/provider/aws/deploy.yaml

      - name: Empty ECR Repository
        run: |
           REPOSITORY_NAME=${{ vars.ECR_REPO }}
           IMAGES=$(aws ecr list-images --repository-name $REPOSITORY_NAME --query 'imageIds[*]' --output json)
           if [[ "$IMAGES" != "[]" ]]; then
           echo "Deleting images from $REPOSITORY_NAME..."
           aws ecr batch-delete-image --repository-name $REPOSITORY_NAME --image-ids "$IMAGES"
           else
            echo "No images found in $REPOSITORY_NAME."
           fi
      
      - name: Terraform destroy
        id: destroy
        run: terraform destroy -auto-approve -input=false