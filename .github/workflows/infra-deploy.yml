# Workflow name
name: Infra Deploy

on:
  push:
    branches:
      - main
    paths:
      - terraform/**
    
  workflow_dispatch: 

  # Environment variables for the workflow
env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  EKS_CLUSTER: ${{ vars.EKS_CLUSTER }}
  S3_BUCKET: ${{ vars.S3_BUCKET }}

jobs:
  terraform:
    name: Terraform Apply
    runs-on: ubuntu-latest

     # Run only on push eventss
    if: github.event_name == 'push'

    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform init -backend-config="bucket=${{ env.S3_BUCKET }}"

      - name: Terraform validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -no-color -input=false -out=plainfile

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false -parallelism=1 planfile

      - name: EKS Update Kubeconfig
        id: getEksConfig
        if: steps.apply.outcome == 'success'
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER }} --region ${{ env.AWS_REGION }}

      - name: Install Ingress Nginx Controller
        if: steps.apply.outcome == 'success' && steps.getEksConfig.outcome == 'success'
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/aws/deploy.yaml  


  # destroy:
  #     name: Terraform Destroy
  #     runs-on: ubuntu-latest

  #   # Run only on workflow dispatch events
  #     if: github.event_name == 'workflow_dispatch'

  #     default:
  #       run:
  #         shell: bash
  #         working-directory: ./terraform

  #     steps:
  #       - name: Checkout repository
  #         uses: actions/checkout@v3

  #       - name: Configure AWS credentials
  #         uses: aws-actions/configure-aws-credentials@v2
  #         with:
  #           aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
  #           aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
  #           aws-region: ${{ env.AWS_REGION }}

  #       - name: Setup Terraform
  #         uses: hashicorp/setup-terraform@v2
  #         with:
  #           terraform_version: 1.6.7

  #       - name: Terraform Init
  #         run: terraform init -backend-config="bucket=${{ env.S3_BUCKET }}"

  #       - name: EKS Get Kubeconfig
  #         id: getEksConfig
  #         run: |
  #           aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER }} --region ${{ env.AWS_REGION }}

  #       - name: Destroy Ingress Nginx Controller
  #         run: |
  #           kubectl delete -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/aws/deploy.yaml

  #       - name: Delete Image Repository
  #         run: |
  #           REPOSITORY_NAME=${{ vars.ECR_REPO }})
  #           IMAGES=$(aws ecr list-images --repository-name $REPOSITORY_NAME --query 'imageIds[*]' --output json)
  #           if [ "$IMAGES" != "[]" ]; then
  #           echo "Deleting images from the repository..."
  #             aws ecr batch-delete-image --repository-name $REPOSITORY_NAME --image-ids "$IMAGES"
  #           else
  #             echo "No images found in the repository."
  #           fi
        

  #       - name: Terraform Destroy
  #         run: terraform destroy -auto-approve -input=false